name: SonarCloud
on:
  push:
    branches: master
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  DOTNET_VERSION: '9.0.x'
  JAVA_VERSION: '17'

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # PATH для глобальних dotnet tools (Windows)
      - name: Ensure dotnet tools PATH
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-sonarscanner

      - name: SonarScanner Begin
        run: >
          dotnet sonarscanner begin
          /k:"Skiper29_SmartAgroPlan"
          /o:"skiper29"
          /d:sonar.token="${{ env.SONAR_TOKEN }}"
          /d:sonar.host.url="https://sonarcloud.io"
          /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.xml"

      - name: Restore
        run: dotnet restore SmartAgroPlan.sln

      - name: Build
        run: dotnet build SmartAgroPlan.sln --configuration Release --no-restore

      - name: Test and Code Coverage (VSCoverage XML)
        run: >
          dotnet-coverage collect
          "dotnet test ./SmartAgroPlan.XUnitTest/SmartAgroPlan.XUnitTest.csproj
          --configuration Release --results-directory ./coverage
          --logger trx;LogFileName=test-results.trx"
          -f xml -o coverage.xml

      - name: SonarScanner End
        if: always()
        run: dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/*.trx"

  test-report:
    name: Test Results
    runs-on: windows-latest
    needs: build
    if: always()
    steps:
      - uses: dorny/test-reporter@v2
        with:
          name: Test results
          artifact: test-results
          path: "**/*.trx"
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
          fail-on-error: true
