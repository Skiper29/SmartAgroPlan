name: SonarCloud
on:
  push:
    branches: master
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Обов'язково для коректного аналізу SonarQube

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # Додаємо шлях до глобальних dotnet tools у PATH, щоб їх можна було викликати за іменем.
      - name: Ensure dotnet tools PATH
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # Встановлюємо необхідні інструменти
      - name: Install tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-sonarscanner

      - name: SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Запускаємо аналіз SonarCloud, вказуючи шлях до coverage report
          dotnet-sonarscanner begin `
            /k:"Skiper29_SmartAgroPlan" `
            /o:"skiper29" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.xml"

      # Оновлені кроки Build and Test
      - name: Restore, Build, and Test with Coverage
        run: |
          dotnet build SmartAgroPlan.sln --configuration Release
          dotnet-coverage collect `
            --output-format xml `
            --output-file coverage.xml `
            -- "dotnet test SmartAgroPlan.XUnitTest/SmartAgroPlan.XUnitTest.csproj --configuration Release"

      - name: SonarScanner End
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Завершуємо аналіз SonarCloud. Звіт про покриття буде завантажено автоматично.
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Save Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # Окремий job для звіту, що показує результати тестування
  test-report:
    name: Test Results
    runs-on: windows-latest
    needs: build
    if: always()
    steps:
      - name: Get Test Results Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Publish Test Report
        uses: dorny/test-reporter@v2
        with:
          name: Test results
          path: coverage.xml
          reporter: 'vstest' # v2.x supports vstest format
          list-suites: failed
          list-tests: failed
          fail-on-error: true
