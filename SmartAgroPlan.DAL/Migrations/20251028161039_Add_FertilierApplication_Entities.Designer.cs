// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartAgroPlan.DAL.Persistence;

#nullable disable

namespace SmartAgroPlan.DAL.Migrations
{
    [DbContext(typeof(SmartAgroPlanDbContext))]
    [Migration("20251028161039_Add_FertilierApplication_Entities")]
    partial class Add_FertilierApplication_Entities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropCoefficientDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropType")
                        .HasColumnType("integer");

                    b.Property<double>("KcEnd")
                        .HasColumnType("double precision");

                    b.Property<double>("KcIni")
                        .HasColumnType("double precision");

                    b.Property<double>("KcMid")
                        .HasColumnType("double precision");

                    b.Property<int>("LDev")
                        .HasColumnType("integer");

                    b.Property<int>("LIni")
                        .HasColumnType("integer");

                    b.Property<int>("LLate")
                        .HasColumnType("integer");

                    b.Property<int>("LMid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CropCoefficientDefinitions");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CropType")
                        .HasColumnType("integer");

                    b.Property<double>("FertilizerRequirement")
                        .HasColumnType("double precision");

                    b.Property<int>("GrowingDuration")
                        .HasColumnType("integer");

                    b.Property<double>("HarvestYield")
                        .HasColumnType("double precision");

                    b.Property<int>("LDev")
                        .HasColumnType("integer");

                    b.Property<int>("LIni")
                        .HasColumnType("integer");

                    b.Property<int>("LLate")
                        .HasColumnType("integer");

                    b.Property<int>("LMid")
                        .HasColumnType("integer");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OptimalSoilId")
                        .HasColumnType("integer");

                    b.Property<string>("SowingEnd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SowingStart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WaterRequirement")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OptimalSoilId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.ApplicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Внесення твердих добрив перед сівбою з подальшим загортанням у ґрунт.",
                            Name = "Розкидання з загортанням"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Внесення добрив у ґрунт поблизу кореневої зони під час вегетації.",
                            Name = "Прикореневе підживлення"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Розкидання добрив по поверхні ґрунту (часто для азоту).",
                            Name = "Поверхневе підживлення (розкидання)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Внесення розчинених добрив безпосередньо на листя рослини.",
                            Name = "Листкове обприскування"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Внесення добрив разом із поливною водою через систему зрошення.",
                            Name = "Фертигація"
                        });
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DaysAfterPlanting")
                        .HasColumnType("integer");

                    b.Property<int>("FertilizationPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("PlanStageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlannedApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("PlannedBoron")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedCalcium")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedCopper")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedIron")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedMagnesium")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedManganese")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedMolybdenum")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedNitrogen")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedPhosphorus")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedPotassium")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedSulfur")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedZinc")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FertilizationPlanId");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("PlanStageId");

                    b.HasIndex("FieldId", "PlannedApplicationDate");

                    b.ToTable("FertilizerApplicationPlan");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("FertilizerProductId")
                        .HasColumnType("integer");

                    b.Property<double>("QuantityKgPerHa")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalQuantityKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPlanId");

                    b.HasIndex("FertilizerProductId");

                    b.ToTable("FertilizerApplicationProduct");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.FertilizerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoronContent")
                        .HasColumnType("double precision");

                    b.Property<double?>("CalciumContent")
                        .HasColumnType("double precision");

                    b.Property<double?>("CopperContent")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double?>("IronContent")
                        .HasColumnType("double precision");

                    b.Property<double?>("MagnesiumContent")
                        .HasColumnType("double precision");

                    b.Property<double?>("ManganeseCont")
                        .HasColumnType("double precision");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("MolybdenumContent")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("NitrogenContent")
                        .HasColumnType("double precision");

                    b.Property<double>("PhosphorusContent")
                        .HasColumnType("double precision");

                    b.Property<double>("PotassiumContent")
                        .HasColumnType("double precision");

                    b.Property<double?>("SulfurContent")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<double?>("ZincContent")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("FertilizerProduct");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.FertilizationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("FertilizationPlans");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.PlanStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationMethodId")
                        .HasColumnType("integer");

                    b.Property<double>("BoronPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("CalciumPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("CopperPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<int>("FertilizationPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("GrowthStage")
                        .HasColumnType("integer");

                    b.Property<double>("IronPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("MagnesiumPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("ManganesePercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("MolybdenumPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("NitrogenPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("PhosphorusPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("PotassiumPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<string>("Rationale")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("SulfurPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("TimingFactor")
                        .HasColumnType("double precision");

                    b.Property<double>("ZincPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMethodId");

                    b.HasIndex("FertilizationPlanId");

                    b.ToTable("PlanStages");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ApplicationMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationPlanId")
                        .HasColumnType("integer");

                    b.Property<double>("AppliedBoron")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedCalcium")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedCopper")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedIron")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedMagnesium")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedManganese")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedMolybdenum")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedNitrogen")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedPhosphorus")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedPotassium")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedSulfur")
                        .HasColumnType("double precision");

                    b.Property<double>("AppliedZinc")
                        .HasColumnType("double precision");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("TemperatureC")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedKmh")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMethodId");

                    b.HasIndex("ApplicationPlanId")
                        .IsUnique();

                    b.HasIndex("RecordedDate");

                    b.HasIndex("FieldId", "ApplicationDate");

                    b.ToTable("FertilizerApplicationRecord");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecordProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationRecordId")
                        .HasColumnType("integer");

                    b.Property<int>("FertilizerProductId")
                        .HasColumnType("integer");

                    b.Property<double>("QuantityUsedKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRecordId");

                    b.HasIndex("FertilizerProductId");

                    b.ToTable("FertilizerApplicationRecordProduct");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Polygon>("Boundary")
                        .IsRequired()
                        .HasColumnType("geography(Polygon, 4326)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentCropId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SoilId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SowingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCropId");

                    b.HasIndex("SoilId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calcium")
                        .HasColumnType("double precision");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Nitrogen")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<double?>("Phosphorus")
                        .HasColumnType("double precision");

                    b.Property<double?>("Potassium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rainfall")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("SoilMoisture")
                        .HasColumnType("double precision");

                    b.Property<double?>("SoilPh")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sulfur")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldConditions");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCropHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("HarvestedDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateOnly>("PlantedDate")
                        .HasColumnType("date");

                    b.Property<double?>("Yield")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldCropHistories");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Soil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Acidity")
                        .HasColumnType("double precision");

                    b.Property<double>("ErosionRisk")
                        .HasColumnType("double precision");

                    b.Property<double>("NutrientContent")
                        .HasColumnType("double precision");

                    b.Property<double>("OrganicMatter")
                        .HasColumnType("double precision");

                    b.Property<double>("SoilDensity")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<double>("WaterRetention")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Soils");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Soil", "OptimalSoil")
                        .WithMany("OptimalCrops")
                        .HasForeignKey("OptimalSoilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OptimalSoil");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationPlan", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.FertilizationPlan", "FertilizationPlan")
                        .WithMany()
                        .HasForeignKey("FertilizationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.PlanStage", "PlanStage")
                        .WithMany()
                        .HasForeignKey("PlanStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FertilizationPlan");

                    b.Navigation("Field");

                    b.Navigation("PlanStage");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationProduct", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationPlan", "ApplicationPlan")
                        .WithMany("Products")
                        .HasForeignKey("ApplicationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.FertilizerProduct", "FertilizerProduct")
                        .WithMany("ApplicationProducts")
                        .HasForeignKey("FertilizerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationPlan");

                    b.Navigation("FertilizerProduct");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.PlanStage", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.ApplicationMethod", "ApplicationMethod")
                        .WithMany("PlanStages")
                        .HasForeignKey("ApplicationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.FertilizationPlan", "FertilizationPlan")
                        .WithMany("Stages")
                        .HasForeignKey("FertilizationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationMethod");

                    b.Navigation("FertilizationPlan");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecord", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.ApplicationMethod", "ApplicationMethod")
                        .WithMany()
                        .HasForeignKey("ApplicationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationPlan", "ApplicationPlan")
                        .WithOne("CompletionRecord")
                        .HasForeignKey("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecord", "ApplicationPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationMethod");

                    b.Navigation("ApplicationPlan");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecordProduct", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecord", "ApplicationRecord")
                        .WithMany("ProductsUsed")
                        .HasForeignKey("ApplicationRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.FertilizerForecasting.FertilizerProduct", "FertilizerProduct")
                        .WithMany("RecordProducts")
                        .HasForeignKey("FertilizerProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRecord");

                    b.Navigation("FertilizerProduct");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Crops.CropVariety", "CurrentCrop")
                        .WithMany("Fields")
                        .HasForeignKey("CurrentCropId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Soil", "Soil")
                        .WithMany("Fields")
                        .HasForeignKey("SoilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentCrop");

                    b.Navigation("Soil");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCondition", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany("Conditions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCropHistory", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Crops.CropVariety", "Crop")
                        .WithMany("FieldCropHistories")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany("CropHistories")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.Navigation("FieldCropHistories");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.ApplicationMethod", b =>
                {
                    b.Navigation("PlanStages");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Applications.FertilizerApplicationPlan", b =>
                {
                    b.Navigation("CompletionRecord");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.FertilizerProduct", b =>
                {
                    b.Navigation("ApplicationProducts");

                    b.Navigation("RecordProducts");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Plans.FertilizationPlan", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.FertilizerForecasting.Records.FertilizerApplicationRecord", b =>
                {
                    b.Navigation("ProductsUsed");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("CropHistories");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Soil", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("OptimalCrops");
                });
#pragma warning restore 612, 618
        }
    }
}
