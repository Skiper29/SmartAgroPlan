// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartAgroPlan.DAL.Persistence;

#nullable disable

namespace SmartAgroPlan.DAL.Migrations
{
    [DbContext(typeof(SmartAgroPlanDbContext))]
    [Migration("20251022140410_AddSulfurCalciumMagnesiumToFieldCondition")]
    partial class AddSulfurCalciumMagnesiumToFieldCondition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropCoefficientDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropType")
                        .HasColumnType("integer");

                    b.Property<double>("KcEnd")
                        .HasColumnType("double precision");

                    b.Property<double>("KcIni")
                        .HasColumnType("double precision");

                    b.Property<double>("KcMid")
                        .HasColumnType("double precision");

                    b.Property<int>("LDev")
                        .HasColumnType("integer");

                    b.Property<int>("LIni")
                        .HasColumnType("integer");

                    b.Property<int>("LLate")
                        .HasColumnType("integer");

                    b.Property<int>("LMid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CropCoefficientDefinitions");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CropType")
                        .HasColumnType("integer");

                    b.Property<double>("FertilizerRequirement")
                        .HasColumnType("double precision");

                    b.Property<int>("GrowingDuration")
                        .HasColumnType("integer");

                    b.Property<double>("HarvestYield")
                        .HasColumnType("double precision");

                    b.Property<int>("LDev")
                        .HasColumnType("integer");

                    b.Property<int>("LIni")
                        .HasColumnType("integer");

                    b.Property<int>("LLate")
                        .HasColumnType("integer");

                    b.Property<int>("LMid")
                        .HasColumnType("integer");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OptimalSoilId")
                        .HasColumnType("integer");

                    b.Property<string>("SowingEnd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SowingStart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WaterRequirement")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OptimalSoilId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Polygon>("Boundary")
                        .IsRequired()
                        .HasColumnType("geography(Polygon, 4326)");

                    b.Property<int>("CurrentCropId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SoilId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SowingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCropId");

                    b.HasIndex("SoilId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calcium")
                        .HasColumnType("double precision");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Nitrogen")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<double?>("Phosphorus")
                        .HasColumnType("double precision");

                    b.Property<double?>("Potassium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rainfall")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("SoilMoisture")
                        .HasColumnType("double precision");

                    b.Property<double?>("SoilPh")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sulfur")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldConditions");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCropHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("HarvestedDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateOnly>("PlantedDate")
                        .HasColumnType("date");

                    b.Property<double?>("Yield")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldCropHistories");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Soil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Acidity")
                        .HasColumnType("double precision");

                    b.Property<double>("ErosionRisk")
                        .HasColumnType("double precision");

                    b.Property<double>("NutrientContent")
                        .HasColumnType("double precision");

                    b.Property<double>("OrganicMatter")
                        .HasColumnType("double precision");

                    b.Property<double>("SoilDensity")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<double>("WaterRetention")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Soils");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Soil", "OptimalSoil")
                        .WithMany("OptimalCrops")
                        .HasForeignKey("OptimalSoilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OptimalSoil");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Crops.CropVariety", "CurrentCrop")
                        .WithMany("Fields")
                        .HasForeignKey("CurrentCropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Soil", "Soil")
                        .WithMany("Fields")
                        .HasForeignKey("SoilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentCrop");

                    b.Navigation("Soil");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCondition", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany("Conditions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.FieldCropHistory", b =>
                {
                    b.HasOne("SmartAgroPlan.DAL.Entities.Crops.CropVariety", "Crop")
                        .WithMany("FieldCropHistories")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgroPlan.DAL.Entities.Fields.Field", "Field")
                        .WithMany("CropHistories")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Crops.CropVariety", b =>
                {
                    b.Navigation("FieldCropHistories");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Field", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("CropHistories");
                });

            modelBuilder.Entity("SmartAgroPlan.DAL.Entities.Fields.Soil", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("OptimalCrops");
                });
#pragma warning restore 612, 618
        }
    }
}
